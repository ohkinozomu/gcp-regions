//go:build ignore

package main

import (
	"bytes"
	"encoding/json"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strings"

	"github.com/sanity-io/litter"
)

type Region struct {
	Name      string  `json:"name"`
	Flag      string  `json:"flag"`
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
}

func generate() (string, error) {
	regionsJsonURL := "https://raw.githubusercontent.com/GoogleCloudPlatform/region-picker/main/data/regions.json"
	resp, err := http.Get(regionsJsonURL)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	regionData, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return "", err
	}

	var m map[string]Region
	if err := json.Unmarshal(regionData, &m); err != nil {
		return "", err
	}

	return strings.Replace(litter.Sdump(m), "main.Region", "Region", -1), err
}

func main() {
	var out bytes.Buffer
	out.Reset()
	out.WriteString(`// Code generated by tools/generator/generate.go; DO NOT EDIT.

package regions

var REGION_DATA = `)

	generated, err := generate()
	if err != nil {
		log.Fatal(err)
	}
	out.WriteString(generated)

	const target = "data.go"
	if err := os.WriteFile(target, out.Bytes(), 0644); err != nil {
		log.Fatal(err)
	}
}
